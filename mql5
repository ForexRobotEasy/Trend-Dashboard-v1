mql5
//+------------------------------------------------------------------+
//|                                                  Trend Dashboard |
//|                                     Copyright 2021, forexroboteasy.com |
//|                                       Developed by Forex Robot Easy Team |
//+------------------------------------------------------------------+

// Indicator input parameters
input ENUM_TIMEFRAMES Timeframe = PERIOD_CURRENT; // Default timeframe is the current chart timeframe

// Indicator buffers
double TrendBuffer[];
double StochasticBuffer[];
double RSIBuffer[];
double CCIBuffer[];

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Set indicator buffers
    SetIndexBuffer(0, TrendBuffer, INDICATOR_DATA);
    SetIndexBuffer(1, StochasticBuffer, INDICATOR_DATA);
    SetIndexBuffer(2, RSIBuffer, INDICATOR_DATA);
    SetIndexBuffer(3, CCIBuffer, INDICATOR_DATA);

    // Set indicator labels
    IndicatorSetString(INDICATOR_SHORTNAME, 'Trend Dashboard');

    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total, const int prev_calculated, const datetime &time[], const double &open[], const double &high[], const double &low[], const double &close[], const long &tick_volume[], const long &volume[], const int &spread[])
{
    // Calculate indicators
    int start = rates_total - prev_calculated;

    for (int i = start; i < rates_total; i++)
    {
        TrendBuffer[i] = CalculateTrend(open[i], close[i]);
        StochasticBuffer[i] = iStochastic(NULL, Timeframe, 5, 3, 3, MODE_SMA, STO_LOWHIGH);
        RSIBuffer[i] = iRSI(NULL, Timeframe, 14, PRICE_CLOSE);
        CCIBuffer[i] = iCCI(NULL, Timeframe, 20, PRICE_TYPICAL);
    }

    // Determine market direction
    double trendSum = 0;

    for (int i = start; i < rates_total; i++)
    {
        trendSum += TrendBuffer[i];
    }

    int marketDirection;

    if (trendSum > 0)
        marketDirection = 1; // Upward trend
    else if (trendSum < 0)
        marketDirection = -1; // Downward trend
    else
        marketDirection = 0; // No trend

    // Output market direction
    Print('Market Direction: ', marketDirection);

    return(rates_total);
}

//+------------------------------------------------------------------+
//| Custom trend calculation function                                |
//+------------------------------------------------------------------+
double CalculateTrend(double open, double close)
{
    double trend = close - open;

    // Normalize trend
    if (trend > 0)
        trend = 1;
    else if (trend < 0)
        trend = -1;
    else
        trend = 0;

    return trend;
}
